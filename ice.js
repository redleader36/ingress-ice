/* Ingress ICE by Nikitakun (https://github.com/nibogd/ingress-ice), distributed under the MIT License
 * 
 * DO NOT EDIT THIS FILE
 */

//Initialize

var system   = require('system');
var args     = system.args;

if (!args[11]) {
  console.log("Please set all variables, visit http://github.com/nibogd/ingress-ice for help");
}

var l            = args[1];
var p            = args[2];
var area         = args[3];
var minlevel     = parseInt(args[4], 10);
var maxlevel     = parseInt(args[5], 10);
var v            = 1000 * parseInt(args[6], 10);
var width        = parseInt(args[7], 10);
var height       = parseInt(args[8], 10);
var folder       = args[9];
var ssnum        = args[10];
var loglevel     = args[11];
var curnum       = 0;
var version      = '2.2.0';
var loginTimeout = 10 * 1000;
var twostep  = 0;
var page     = require('webpage').create();

var val, message, Le;

page.viewportSize = {
  width: width + 42,
  height: height + 167
};

//Functions

function announce(str, priority) {
  if (loglevel>=priority) {
    console.log(str);
  }
}
function getDateTime() {
  var now     = new Date(); 
  var year    = now.getFullYear();
  var month   = now.getMonth()+1; 
  var day     = now.getDate();
  var hour    = now.getHours();
  var minute  = now.getMinutes();
  var second  = now.getSeconds(); 
  if(month.toString().length == 1) {
    var month = '0'+month;
  }
  if(day.toString().length == 1) {
    var day = '0'+day;
  }   
  if(hour.toString().length == 1) {
    var hour = '0'+hour;
  }
  if(minute.toString().length == 1) {
    var minute = '0'+minute;
  }
  if(second.toString().length == 1) {
    var second = '0'+second;
  }   
  var dateTime = year+'-'+month+'-'+day+'--'+hour+'-'+minute+'-'+second;   
  return dateTime;
};

function getFileTime() {
    var now     = new Date(); 
    var hour    = now.getHours();
    var minute  = now.getMinutes();
    var second  = now.getSeconds();   
    if(hour.toString().length == 1) {
        var hour = '0'+hour;
    }
    if(minute.toString().length == 1) {
        var minute = '0'+minute;
    }
    if(second.toString().length == 1) {
        var second = '0'+second;
    }   
    var dateTime = hour+'-'+minute+'-'+second;   
    return dateTime;
};

function getFolderDate() {
    var now     = new Date(); 
    var year    = now.getFullYear();
    var month   = now.getMonth()+1; 
    var day     = now.getDate();
    if(month.toString().length == 1) {
        var month = '0'+month;
    }
    if(day.toString().length == 1) {
        var day = '0'+day;
    }   
    var dateTime = year+'-'+month+'-'+day;   
    return dateTime;
};

function setminmax(min, max) {
  var minAvailable = page.evaluate(function () { return document.querySelectorAll('.level_notch.selected')[0]});
  var maxAvailable = page.evaluate(function () { return document.querySelectorAll('.level_notch.selected')[1]});
  if (parseInt(minAvailable.id[10], 10)>min) {
    console.log('The minimal portal level is too low, using default. Consider setting it higher.');
  } else {
    var rect = page.evaluate(function() {
      return document.querySelectorAll('.level_notch.selected')[0].getBoundingClientRect();
    });
    page.sendEvent('click', rect.left + rect.width / 2, rect.top + rect.height / 2);
    //page.render('debug0.png');
    window.setTimeout(function() { 
      var rect1 = page.evaluate(function(min) {
  return document.querySelector('#level_low' + min).getBoundingClientRect();
      }, min);
      page.sendEvent('click', rect1.left + rect1.width / 2, rect1.top + rect1.height / 2);
      //page.render('debug1.png');
    }, v/30);
  };
  if (v<90000) {
    console.log('Custom highest portal level may work bad with low delay. If it doesn\'t work well, set a higher delay.');
  }
  if (max<8) {
    window.setTimeout(function() {
      var rect2 = page.evaluate(function() {
  return document.querySelectorAll('.level_notch.selected')[1].getBoundingClientRect();
      });
      page.sendEvent('click', rect2.left + rect2.width / 2, rect2.top + rect2.height / 2);
      //page.render('debug2.png');
      window.setTimeout(function() { 
  var rect3 = page.evaluate(function(min) {
    return document.querySelector('#level_high' + min).getBoundingClientRect();
  }, max);
  page.sendEvent('click', rect3.left + rect3.width / 2, rect3.top + rect3.height / 2);
  //page.render('debug3.png');
  page.evaluate(function () {document.querySelector('#filters_container').style.display = 'none'});
  //page.render('debug4.png');
      }, v/30)}, v/20)};
};

function s() {
  announce(getDateTime() + ': screen saved', 2);
  page.render(folder + '/' + getFolderDate() + '/' + 'ingr_' + getFileTime() + '.png');
};

function quit(err) {
  if (err) {
    announce('\nICE crashed. Reason: ' + err + ' :(', 1); //nice XD
  } else {
    announce('Quit', 1);
  };
  phantom.exit();
};

function checkSettings(l, p, minlevel, maxlevel, area) {
  if (!l | !p) {
    quit('you haven\'t entered your login and/or password');
  };
  if ((minlevel < 0 | minlevel > 8) | (maxlevel < 0 | maxlevel > 8) | (!minlevel | !maxlevel)) {
    quit('the lowest and/or highest portal levels were not set or were set wrong');
  };
  if (minlevel>maxlevel) {
    quit('lowest portal level is higher than highest. Isn\'t that impossible?!');
  };
  if (!area | area == 0) {
    quit('you forgot to set the location link, didn\'t you?');
  };
}

function greet() {
  if (loglevel==3) {
    console.log('     _____ )   ___      _____) \n    (, /  (__/_____)  /        \n      /     /         )__      \n  ___/__   /        /          \n(__ /     (______) (_____)  v' + version + ' (https://github.com/nibogd/ingress-ice)\n\nIf something doesn\'t work or if you want to submit a feature request, visit https://github.com/nibogd/ingress-ice/issues \nConnecting...');
  } else if (loglevel!=0) {
    console.log('Ingress ICE v' + version + ' starting...\nSee https://github.com/nibogd/ingress-ice for configuration.');
  }
}

function login(l, p) {
  page.evaluate(function (l) {
    document.getElementById('Email').value = l;
  }, l);
  
  page.evaluate(function (p) {
    document.getElementById('Passwd').value = p;
  }, p);
  
  page.evaluate(function () {
    document.querySelector("input#signIn").click();
  });
  
  page.evaluate(function () {
    document.getElementById('gaia_loginform').submit(); // Not using POST because the URI may change 
  });
}

function checkLogin() {
  
  announce('URI is now ' + page.url.substring(0,40) + '... .\nVerifying login...', 4);
  
  if (page.url.substring(0,40) == 'https://accounts.google.com/ServiceLogin') {quit('login failed: wrong email and/or password')};
    
    if (page.url.substring(0,40) == 'https://appengine.google.com/_ah/loginfo') {
      announce('Accepting appEngine request...', 4);
      page.evaluate(function () {
  document.getElementById('persist_checkbox').checked = true;
  document.getElementsByTagName('form').submit();
      });
    };
    
    if (page.url.substring(0,40) == 'https://accounts.google.com/SecondFactor') {
      announce('Using two-step verification, please enter your code:', 1);
      twostep = system.stdin.readLine();
    };
    
    if (twostep) {
      page.evaluate(function (code) {
  document.getElementById('smsUserPin').value = code;
      }, twostep);
      page.evaluate(function () {
  document.getElementById('gaia_secondfactorform').submit();
      });
    };
}

function count() {
  if ((curnum>=ssnum)&&(ssnum!=0)) {
    announce('Finished sucessfully. Exiting...\nThanks for using ingress-ice!', 1);
    phantom.exit();
  } else if (ssnum!=0) {
    announce('Screen #' + (curnum + 1) + '/' + ssnum + ' captured', 2);
    curnum++;
  }
}

function hideDebris() {
  page.evaluate(function () {
    if (document.querySelector('#comm'))           {document.querySelector('#comm').style.display = 'none'};
    if (document.querySelector('#player_stats'))   {document.querySelector('#player_stats').style.display = 'none'};
    if (document.querySelector('#game_stats'))     {document.querySelector('#game_stats').style.display = 'none'};
    if (document.querySelector('#geotools'))       {document.querySelector('#geotools').style.display = 'none'};
    if (document.querySelector('#header'))         {document.querySelector('#header').style.display = 'none'};
    if (document.querySelector('#snapcontrol'))    {document.querySelector('#snapcontrol').style.display = 'none'};
    if (document.querySelectorAll('.img_snap')[0]) {document.querySelectorAll('.img_snap')[0].style.display = 'none'};
  });
  page.evaluate(function () {
    var hide = document.querySelectorAll('.gmnoprint');
    for (index = 0; index < hide.length; ++index) {
      hide[index].style.display = 'none';
    }});
}

function prepare() {
  var selector = "#map_canvas";
  var elementBounds = page.evaluate(function(selector) {
    var clipRect = document.querySelector(selector).getBoundingClientRect();
    return {
      top:     clipRect.top,
      left:     clipRect.left,
      width:  clipRect.width,
      height: clipRect.height
    };
  }, selector);
  var oldClipRect = page.clipRect;
  page.clipRect = elementBounds;
}

function timestamp() {  
  page.evaluate(function () {
    var timestamp = document.createElement('div');
    timestamp.id = 'timehud';
    timestamp.className = 'timehud';

    var currentTime = new Date()
    var hours = ("0" + currentTime.getHours()).slice(-2)
    var minutes = ("0" + currentTime.getMinutes()).slice(-2)
    var seconds = currentTime.getSeconds()

    var time = hours + ":" + minutes + ":" + seconds

    var day = ("0" + currentTime.getDate()).slice(-2)
    var month = ("0" + (currentTime.getMonth() + 1)).slice(-2)
    var year = currentTime.getFullYear()

    var date = month + "-" + day + "-" + year

    timestamp.innerHTML =  date + ' ' + time;    
    timestamp.style.position = "absolute";
    timestamp.style.bottom = "100px";
    timestamp.style.right = "100px";
    timestamp.style.color = "yellow";
    document.getElementsByTagName('body')[0].appendChild(timestamp);

  });
}

//MAIN SCRIPT

checkSettings(l, p, minlevel, maxlevel, area);
greet();

page.open('https://www.ingress.com/intel', function (status) {
  
  if (status !== 'success') {quit('cannot connect to remote server')};
    
    var link = page.evaluate(function () {
      return document.getElementsByTagName('a')[0].href; 
    });
    
    announce('Logging in...', 2);
    page.open(link, function () {
      
      login(l, p);
      
      window.setTimeout(function () {
        checkLogin();
        window.setTimeout(function () {
    page.open(area, function () {
      setInterval(function () {
        hideDebris();
        if ((minlevel>1)|(maxlevel<8)){
          setminmax(minlevel,maxlevel);
        } else {
          page.evaluate(function () {
      document.querySelector("#filters_container").style.display= 'none';
          });
        }
        timestamp();
        window.setTimeout(function () {
          prepare();
          count();
          s();
          page.reload();
        }, v);
      }, v);
    });
        }, loginTimeout);
      }, loginTimeout);
      
    });
});